"""
Module x·ª≠ l√Ω c√°c ch·∫ø ƒë·ªô Agent, v·ªõi c∆° ch·∫ø retry v√† chuy·ªÉn ƒë·ªïi API key to√†n c·ª•c.
"""
import os
import json
import re
import argparse
import time

from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.json import JSON
from google.api_core.exceptions import ResourceExhausted

from termi_cli import api
from termi_cli.prompts import build_agent_instruction, build_master_agent_prompt, build_executor_instruction
from termi_cli.config import load_config, MODEL_RPM_LIMITS

def run_master_agent(console: Console, args: argparse.Namespace):
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn Agent, v·ªõi v√≤ng l·∫∑p retry m·∫°nh m·∫Ω ƒë·ªÉ x·ª≠ l√Ω l·ªói Quota.
    """
    console.print(Panel(f"[bold green]ü§ñ Agent ƒêa NƒÉng ƒê√£ K√≠ch Ho·∫°t ü§ñ[/bold green]\n[yellow]M·ª•c ti√™u:[/yellow] {args.prompt}", border_style="blue"))

    initial_response = None
    max_attempts = len(api._api_keys)
    current_attempt = 0
    
    while current_attempt < max_attempts:
        try:
            with console.status("[bold cyan]üß† Agent ƒëang ph√¢n t√≠ch y√™u c·∫ßu...[/bold cyan]") as status:
                master_prompt = build_master_agent_prompt(args.prompt)
                config = load_config()
                agent_model_name = config.get("agent_model", "models/gemini-pro-latest")
                model = api.genai.GenerativeModel(agent_model_name)
                response = api.safe_generate_content(model, master_prompt)

                if not response or not response.text:
                    raise ValueError("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ AI.")

                json_match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
                if not json_match: json_match = re.search(r'(\{.*?\})', response.text, re.DOTALL)
                if not json_match: raise ValueError("Agent kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá ban ƒë·∫ßu.")

                initial_response = json.loads(json_match.group(1))
                break 

        except ResourceExhausted as e:
            error_message = str(e)
            
            # S·ª¨A L·ªñI: ∆Øu ti√™n ki·ªÉm tra l·ªói "c·ª©ng" (RPD) tr∆∞·ªõc
            if "free_tier_requests" in error_message or "daily" in error_message:
                current_attempt += 1
                console.print(f"[bold yellow]‚ö†Ô∏è G·∫∑p l·ªói Quota h√†ng ng√†y (RPD). ƒêang th·ª≠ chuy·ªÉn key... ({current_attempt}/{max_attempts})[/bold yellow]")
                success, msg = api.switch_to_next_api_key()
                if not success:
                    console.print(f"[bold red]‚ùå {msg}. ƒê√£ h·∫øt t·∫•t c·∫£ API keys.[/bold red]"); return
            # N·∫øu kh√¥ng ph·∫£i l·ªói c·ª©ng, m·ªõi ki·ªÉm tra l·ªói "m·ªÅm" (RPM)
            elif (match := re.search(r"Please retry in (\d+\.\d+)s", error_message)):
                wait_time = float(match.group(1)) + 1
                with console.status(f"[bold yellow]‚è≥ G·∫∑p l·ªói Quota (RPM). T·ª± ƒë·ªông ch·ªù {wait_time:.1f}s...[/bold yellow]", spinner="clock"):
                    time.sleep(wait_time)
                continue # Th·ª≠ l·∫°i v·ªõi c√πng key
            # Tr∆∞·ªùng h·ª£p c√≤n l·∫°i, coi nh∆∞ l·ªói c·ª©ng v√† chuy·ªÉn key
            else:
                current_attempt += 1
                console.print(f"[bold yellow]‚ö†Ô∏è G·∫∑p l·ªói Quota kh√¥ng x√°c ƒë·ªãnh. ƒêang th·ª≠ chuy·ªÉn key... ({current_attempt}/{max_attempts})[/bold yellow]")
                success, msg = api.switch_to_next_api_key()
                if not success:
                    console.print(f"[bold red]‚ùå {msg}. ƒê√£ h·∫øt t·∫•t c·∫£ API keys.[/bold red]"); return
        
        except Exception as e:
            console.print(f"[bold red]ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong pha ph√¢n t√≠ch: {e}[/bold red]"); return

    if not initial_response:
        console.print("[bold red]L·ªói: Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI sau nhi·ªÅu l·∫ßn th·ª≠.[/bold red]"); return

    task_type = initial_response.get("task_type")
    if task_type == "project_plan":
        execute_project_plan(console, args, initial_response.get("plan", {}))
    elif task_type == "simple_task":
        execute_simple_task(console, args, initial_response.get("step", {}))
    else:
        console.print(f"[bold red]L·ªói: Agent tr·∫£ v·ªÅ lo·∫°i t√°c v·ª• kh√¥ng x√°c ƒë·ªãnh: '{task_type}'[/bold red]")

def _execute_tool(console: Console, tool_name: str, tool_args: dict) -> str:
    # ... (H√†m n√†y gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi) ...
    if tool_name not in api.AVAILABLE_TOOLS:
        raise ValueError(f"Agent tried to call a non-existent tool: {tool_name}")
    tool_function = api.AVAILABLE_TOOLS[tool_name]
    console.print(f"[yellow]üé¨ H√†nh ƒë·ªông:[/yellow] G·ªçi tool [bold cyan]{tool_name}[/bold cyan] v·ªõi tham s·ªë {tool_args}")
    if tool_name == 'write_file':
        confirm_choice = console.input(f"  [bold yellow]‚ö†Ô∏è AI mu·ªën ghi v√†o file '{tool_args.get('path')}'. ƒê·ªìng √Ω? [y/n]: [/bold yellow]", markup=True).lower()
        if confirm_choice != 'y': return "User denied the file write operation."
        try:
            content_to_write = tool_args.get('content', '')
            path_to_write = tool_args.get('path')
            parent_dir = os.path.dirname(path_to_write)
            if parent_dir: os.makedirs(parent_dir, exist_ok=True)
            with open(path_to_write, 'w', encoding='utf-8') as f: f.write(content_to_write)
            return f"Successfully wrote to file '{path_to_write}'."
        except Exception as e: return f"Error writing to file: {e}"
    else:
        with console.status(f"[green]ƒêang ch·∫°y tool {tool_name}...[/green]"):
            return tool_function(**tool_args)

def execute_project_plan(console: Console, args: argparse.Namespace, project_plan: dict):
    # ... (Ph·∫ßn ƒë·∫ßu h√†m gi·ªØ nguy√™n) ...
    if not project_plan: console.print("[bold red]L·ªói: K·∫ø ho·∫°ch d·ª± √°n tr·ªëng.[/bold red]"); return
    plan_str = json.dumps(project_plan, indent=2, ensure_ascii=False)
    console.print(Panel(JSON(plan_str), title="[bold green]üìù K·∫ø Ho·∫°ch D·ª± √Ån Chi Ti·∫øt[/bold green]", border_style="green", expand=False))
    console.print("\n[bold green]üöÄ B·∫Øt ƒë·∫ßu pha th·ª±c thi...[/bold green]")
    config = load_config()
    agent_model_name = config.get("agent_model", "models/gemini-pro-latest")
    executor_instruction = build_executor_instruction()
    chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=executor_instruction)
    scratchpad = f"I have been given a plan to execute.\n\n**PROJECT PLAN:**\n```json\n{plan_str}\n```\n\nMy task is to implement this plan step-by-step."
    max_steps = 30

    for step in range(max_steps):
        console.print(f"\n[bold]--- V√≤ng {step + 1}/{max_steps} ---[/bold]")
        dynamic_prompt = f"<scratchpad>\n{scratchpad}\n</scratchpad>\nBased on the plan and my scratchpad, what is the single next action I should take?"
        
        max_attempts = len(api._api_keys)
        current_attempt = 0
        step_success = False
        while current_attempt <= max_attempts and not step_success:
            try:
                with console.status("[magenta]üë©‚Äçüíª Executor ƒëang suy nghƒ©...[/magenta]"):
                    response = chat_session.send_message(dynamic_prompt)
                
                # ... (logic x·ª≠ l√Ω response v√† tool gi·ªØ nguy√™n) ...
                json_match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
                if not json_match: json_match = re.search(r'(\{.*?\})', response.text, re.DOTALL)
                if not json_match: raise ValueError(f"No valid JSON found. Raw response:\n{response.text}")
                plan = json.loads(json_match.group(1))
                thought = plan.get("thought", "")
                action = plan.get("action", {})
                console.print(Panel(Markdown(thought), title="[bold magenta]Suy nghƒ© c·ªßa Executor[/bold magenta]", border_style="magenta"))
                tool_name = action.get("tool_name", "")
                tool_args = action.get("tool_args", {})
                if tool_name == "finish":
                    final_answer = tool_args.get("answer", "D·ª± √°n ƒë√£ ho√†n th√†nh.")
                    console.print(Panel(Markdown(final_answer), title="[bold green]‚úÖ D·ª± √Ån Ho√†n Th√†nh[/bold green]", border_style="green"))
                    return
                observation = _execute_tool(console, tool_name, tool_args)
                console.print(Panel(Markdown(str(observation)), title="[bold blue]üëÄ K·∫øt qu·∫£[/bold blue]", border_style="blue", expand=False))
                scratchpad += f"\n\n**Step {step + 1}:**\n- **Thought:** {thought}\n- **Action:** Called `{tool_name}` with args `{tool_args}`.\n- **Observation:** {observation}"
                step_success = True

            except ResourceExhausted as e:
                # S·ª¨A L·ªñI: √Åp d·ª•ng logic ki·ªÉm tra l·ªói "c·ª©ng" tr∆∞·ªõc
                error_message = str(e)
                if "free_tier_requests" in error_message or "daily" in error_message:
                    current_attempt += 1
                    console.print(f"[yellow]‚ö†Ô∏è G·∫∑p l·ªói Quota (RPD). ƒêang chuy·ªÉn key... ({current_attempt}/{max_attempts})[/yellow]")
                    success, msg = api.switch_to_next_api_key()
                    if success:
                        console.print(f"[green]‚úÖ ƒê√£ chuy·ªÉn sang {msg}. ƒêang t·∫°o l·∫°i session...[/green]")
                        chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=executor_instruction)
                    else:
                        console.print(f"[bold red]‚ùå {msg}. H·∫øt API keys.[/bold red]"); return
                elif (match := re.search(r"Please retry in (\d+\.\d+)s", error_message)):
                    wait_time = float(match.group(1)) + 1
                    with console.status(f"[yellow]‚è≥ G·∫∑p l·ªói Quota (RPM). Ch·ªù {wait_time:.1f}s...[/yellow]", spinner="clock"):
                        time.sleep(wait_time)
                else:
                    current_attempt += 1
                    console.print(f"[yellow]‚ö†Ô∏è G·∫∑p l·ªói Quota kh√¥ng x√°c ƒë·ªãnh. ƒêang chuy·ªÉn key... ({current_attempt}/{max_attempts})[/yellow]")
                    success, msg = api.switch_to_next_api_key()
                    if success:
                        console.print(f"[green]‚úÖ ƒê√£ chuy·ªÉn sang {msg}. ƒêang t·∫°o l·∫°i session...[/green]")
                        chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=executor_instruction)
                    else:
                        console.print(f"[bold red]‚ùå {msg}. H·∫øt API keys.[/bold red]"); return
            except Exception as e:
                console.print(f"[bold red]L·ªói trong v√≤ng l·∫∑p Executor: {e}[/bold red]"); return
        
        if not step_success:
            console.print(f"[bold red]L·ªói: Kh√¥ng th·ªÉ ho√†n th√†nh b∆∞·ªõc {step + 1} sau nhi·ªÅu l·∫ßn th·ª≠.[/bold red]"); return
    else:
        console.print(f"[bold yellow]‚ö†Ô∏è Agent ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n {max_steps} b∆∞·ªõc.[/bold yellow]")

def execute_simple_task(console: Console, args: argparse.Namespace, first_step: dict):
    # ... (Ph·∫ßn ƒë·∫ßu h√†m gi·ªØ nguy√™n) ...
    if not first_step: console.print("[bold red]L·ªói: Kh√¥ng c√≥ b∆∞·ªõc ReAct ƒë·∫ßu ti√™n.[/bold red]"); return
    console.print("[green]=> Y√™u c·∫ßu ƒë∆∞·ª£c ph√¢n lo·∫°i l√† 'T√°c v·ª• ƒë∆°n gi·∫£n', k√≠ch ho·∫°t ch·∫ø ƒë·ªô ReAct.[/green]")
    config = load_config()
    agent_model_name = config.get("agent_model", "models/gemini-pro-latest")
    agent_instruction = build_agent_instruction()
    chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=agent_instruction)
    current_step_json = first_step
    max_steps = 10

    for step in range(max_steps):
        console.print(f"\n[bold]--- V√≤ng {step + 1}/{max_steps} ---[/bold]")
        try:
            # ... (logic x·ª≠ l√Ω step v√† tool gi·ªØ nguy√™n) ...
            thought = current_step_json.get("thought", "")
            action = current_step_json.get("action", {})
            console.print(Panel(Markdown(thought), title="[bold magenta]K·∫ø Ho·∫°ch C·ªßa Agent[/bold magenta]", border_style="magenta"))
            tool_name = action.get("tool_name", "")
            tool_args = action.get("tool_args", {})
            if tool_name == "finish":
                final_answer = tool_args.get("answer", "Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh.")
                console.print(Panel(Markdown(final_answer), title="[bold green]‚úÖ Nhi·ªám V·ª• Ho√†n Th√†nh[/bold green]", border_style="green"))
                return
            observation = _execute_tool(console, tool_name, tool_args)
            console.print(Panel(Markdown(str(observation)), title="[bold blue]üëÄ Quan s√°t[/bold blue]", border_style="blue", expand=False))
            next_prompt = f"This was the result of my last action:\n\n{observation}\n\nBased on this, what is my next thought and action?"
            
            max_attempts = len(api._api_keys)
            current_attempt = 0
            step_success = False
            while current_attempt <= max_attempts and not step_success:
                try:
                    with console.status("[magenta]üß† Agent ƒëang suy nghƒ©...[/magenta]"):
                        response = chat_session.send_message(next_prompt)
                    
                    # ... (logic parse response gi·ªØ nguy√™n) ...
                    json_match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
                    if not json_match: json_match = re.search(r'(\{.*?\})', response.text, re.DOTALL)
                    if not json_match: raise ValueError(f"No valid JSON found. Raw response:\n{response.text}")
                    current_step_json = json.loads(json_match.group(1))
                    step_success = True

                except ResourceExhausted as e:
                    # S·ª¨A L·ªñI: √Åp d·ª•ng logic ki·ªÉm tra l·ªói "c·ª©ng" tr∆∞·ªõc
                    error_message = str(e)
                    if "free_tier_requests" in error_message or "daily" in error_message:
                        current_attempt += 1
                        console.print(f"[yellow]‚ö†Ô∏è G·∫∑p l·ªói Quota (RPD). ƒêang chuy·ªÉn key... ({current_attempt}/{max_attempts})[/yellow]")
                        success, msg = api.switch_to_next_api_key()
                        if success:
                            console.print(f"[green]‚úÖ ƒê√£ chuy·ªÉn sang {msg}. ƒêang t·∫°o l·∫°i session...[/green]")
                            chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=agent_instruction)
                        else:
                            console.print(f"[bold red]‚ùå {msg}. H·∫øt API keys.[/bold red]"); return
                    elif (match := re.search(r"Please retry in (\d+\.\d+)s", error_message)):
                        wait_time = float(match.group(1)) + 1
                        with console.status(f"[yellow]‚è≥ G·∫∑p l·ªói Quota (RPM). Ch·ªù {wait_time:.1f}s...[/yellow]", spinner="clock"):
                            time.sleep(wait_time)
                    else:
                        current_attempt += 1
                        console.print(f"[yellow]‚ö†Ô∏è G·∫∑p l·ªói Quota kh√¥ng x√°c ƒë·ªãnh. ƒêang chuy·ªÉn key... ({current_attempt}/{max_attempts})[/yellow]")
                        success, msg = api.switch_to_next_api_key()
                        if success:
                            console.print(f"[green]‚úÖ ƒê√£ chuy·ªÉn sang {msg}. ƒêang t·∫°o l·∫°i session...[/green]")
                            chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=agent_instruction)
                        else:
                            console.print(f"[bold red]‚ùå {msg}. H·∫øt API keys.[/bold red]"); return
            
            if not step_success:
                console.print(f"[bold red]L·ªói: Kh√¥ng th·ªÉ ti·∫øp t·ª•c b∆∞·ªõc ti·∫øp theo sau nhi·ªÅu l·∫ßn th·ª≠.[/bold red]"); return

        except Exception as e:
            console.print(f"[bold red]L·ªói trong v√≤ng l·∫∑p ReAct: {e}[/bold red]"); return
    else:
        console.print(f"[bold yellow]‚ö†Ô∏è Agent ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n {max_steps} b∆∞·ªõc.[/bold yellow]")