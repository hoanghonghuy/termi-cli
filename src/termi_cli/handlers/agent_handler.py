"""
Module x·ª≠ l√Ω ch·∫ø ƒë·ªô Agent t·ª± tr·ªã, s·ª≠ d·ª•ng m√¥ h√¨nh ReAct (Reason + Act)
ƒë·ªÉ th·ª±c hi·ªán c√°c nhi·ªám v·ª• ph·ª©c t·∫°p.
"""
import os
import json
import re
import argparse

from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel

from termi_cli import api
from termi_cli.prompts import build_agent_instruction

def run_agent_mode(console: Console, args: argparse.Namespace):
    """
    Ch·∫°y ch·∫ø ƒë·ªô Agent t·ª± tr·ªã, qu·∫£n l√Ω v√≤ng l·∫∑p ReAct v√† x·ª≠ l√Ω l·ªói m·ªôt c√°ch ƒë·ªôc l·∫≠p.
    """
    console.print(Panel(f"[bold green]ü§ñ Ch·∫ø ƒê·ªô Agent ƒê√£ K√≠ch Ho·∫°t ü§ñ[/bold green]\n[yellow]M·ª•c ti√™u:[/yellow] {args.prompt}", border_style="blue"))

    agent_instruction = build_agent_instruction()
    chat_session = api.start_chat_session(
        model_name=args.model,
        system_instruction=agent_instruction
    )

    current_prompt_parts = [{"text": args.prompt}]
    max_steps = 10
    
    for step in range(max_steps):
        console.print(f"\n[bold]--- V√≤ng {step + 1}/{max_steps} ---[/bold]")
        
        response_text = ""
        for _ in range(2):
            try:
                with console.status("[magenta]üß† Agent ƒëang suy nghƒ©...[/magenta]"):
                    response_stream = api.send_message(chat_session, current_prompt_parts)
                    response_text = ""
                    for chunk in response_stream:
                        if chunk.candidates:
                            # S·ª¨A L·ªñI ·ªû ƒê√ÇY: Th√™m [0] ƒë·ªÉ truy c·∫≠p candidate ƒë·∫ßu ti√™n
                            for part in chunk.candidates[0].content.parts:
                                if part.text:
                                    response_text += part.text
                if response_text.strip():
                    break
                console.print("[yellow]C·∫£nh b√°o: AI tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng, ƒëang th·ª≠ l·∫°i...[/yellow]")
            except Exception as e:
                console.print(f"[bold red]L·ªói khi giao ti·∫øp v·ªõi AI: {e}[/bold red]")
                return

        if not response_text.strip():
            console.print("[bold red]L·ªói: AI li√™n t·ª•c tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng. ƒêang d·ª´ng Agent.[/bold red]")
            return

        try:
            json_match = re.search(r'```json\s*(\{.*?\})\s*```', response_text, re.DOTALL)
            if not json_match:
                json_match = re.search(r'(\{.*?\})', response_text, re.DOTALL)
            
            if not json_match:
                console.print("[bold red]L·ªói: AI kh√¥ng tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá. ƒêang d·ª´ng Agent.[/bold red]")
                console.print(f"Ph·∫£n h·ªìi th√¥:\n{response_text}")
                break

            json_str = json_match.group(1)
            
            def escape_newlines(match):
                return match.group(0).replace('\n', '\\n')
            json_str_fixed = re.sub(r'"[^"]*"', escape_newlines, json_str)

            plan = json.loads(json_str_fixed)
            thought = plan.get("thought")
            action = plan.get("action")
            
            if not thought or not action:
                raise ValueError("Ph·∫£n h·ªìi JSON thi·∫øu 'thought' ho·∫∑c 'action'.")

            console.print(Panel(Markdown(thought), title="[bold magenta]K·∫ø Ho·∫°ch C·ªßa Agent[/bold magenta]", border_style="magenta"))

            tool_name_raw = action.get("tool_name", "")
            tool_name = tool_name_raw.split(':')[-1]
            
            tool_args = action.get("tool_args", {})

            if tool_name == "finish":
                final_answer = tool_args.get("answer", "Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh.")
                console.print(Panel(Markdown(final_answer), title="[bold green]‚úÖ Nhi·ªám V·ª• Ho√†n Th√†nh[/bold green]", border_style="green"))
                break

            if tool_name in api.AVAILABLE_TOOLS:
                console.print(f"[yellow]üé¨ H√†nh ƒë·ªông:[/yellow] G·ªçi tool [bold cyan]{tool_name}[/bold cyan] v·ªõi tham s·ªë {tool_args}")
                tool_function = api.AVAILABLE_TOOLS[tool_name]
                
                observation = ""
                if tool_name == 'write_file':
                    confirm_choice = console.input(f"  [bold yellow]‚ö†Ô∏è AI mu·ªën ghi v√†o file '{tool_args.get('path')}'. ƒê·ªìng √Ω? [y/n]: [/bold yellow]", markup=True).lower()
                    if confirm_choice != 'y':
                        observation = "User denied the file write operation."
                    else:
                        try:
                            content_to_write = tool_args.get('content', '')
                            path_to_write = tool_args.get('path')
                            parent_dir = os.path.dirname(path_to_write)
                            if parent_dir: os.makedirs(parent_dir, exist_ok=True)
                            with open(path_to_write, 'w', encoding='utf-8') as f: f.write(content_to_write)
                            observation = f"Successfully wrote to file '{path_to_write}'."
                        except Exception as e:
                            observation = f"Error writing to file: {e}"
                else:
                    with console.status(f"[green]ƒêang ch·∫°y tool {tool_name}...[/green]"):
                        observation = tool_function(**tool_args)
                
                display_content = None
                if tool_name == 'read_file':
                    file_extension = os.path.splitext(tool_args.get("path", ""))[1].lstrip('.')
                    lang = file_extension if file_extension else "text"
                    display_content = Markdown(f"```{lang}\n{observation}\n```")
                else:
                    display_content = Markdown(str(observation)) # ƒê·∫£m b·∫£o observation l√† string

                console.print(Panel(display_content, title="[bold blue]üëÄ Quan s√°t[/bold blue]", border_style="blue", expand=False))
                
                current_prompt_parts = [{"text": f"This was the result of your last action:\n\n{observation}\n\nBased on this, what is your next thought and action to achieve the original objective: '{args.prompt}'?"}]
            else:
                console.print(f"[bold red]L·ªói: AI c·ªë g·∫Øng g·ªçi m·ªôt tool kh√¥ng t·ªìn t·∫°i: {tool_name_raw}[/bold red]")
                break

        except (json.JSONDecodeError, ValueError) as e:
            console.print(f"[bold red]L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi c·ªßa Agent: {e}[/bold red]")
            console.print(f"Ph·∫£n h·ªìi th√¥:\n{response_text}")
            break
        except Exception as e:
            console.print(f"[bold red]ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong v√≤ng l·∫∑p Agent: {e}[/bold red]")
            break
    else:
        console.print(f"[bold yellow]‚ö†Ô∏è Agent ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n {max_steps} b∆∞·ªõc v√† s·∫Ω t·ª± ƒë·ªông d·ª´ng l·∫°i.[/bold yellow]")