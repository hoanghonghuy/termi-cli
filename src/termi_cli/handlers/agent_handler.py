# src/termi_cli/handlers/agent_handler.py

"""
Module x·ª≠ l√Ω c√°c ch·∫ø ƒë·ªô Agent, v·ªõi c∆° ch·∫ø retry v√† chuy·ªÉn ƒë·ªïi API key to√†n c·ª•c.
"""
import os
import json
import re
import argparse
import time

from rich.console import Console, Group
from rich.markdown import Markdown
from rich.panel import Panel
from rich.json import JSON
from rich.text import Text
from rich.tree import Tree
from google.api_core.exceptions import ResourceExhausted

from termi_cli import api
from termi_cli.api import RPDQuotaExhausted # Import exception t√πy ch·ªânh
from termi_cli.prompts import build_agent_instruction, build_master_agent_prompt, build_executor_instruction
from termi_cli.config import load_config

def _format_plan_for_display(project_plan: dict) -> Panel:
    """
    Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng JSON k·∫ø ho·∫°ch th√†nh m·ªôt Panel rich ƒë·∫πp m·∫Øt, d·ªÖ ƒë·ªçc.
    """
    project_name = project_plan.get("project_name", "Kh√¥ng c√≥ t√™n")
    reasoning = project_plan.get("reasoning", "Kh√¥ng c√≥ gi·∫£i th√≠ch.")
    
    header_text = Text()
    header_text.append("‚ú® T√™n D·ª± √Ån: ", style="bold cyan")
    header_text.append(f"{project_name}\n", style="yellow")
    header_text.append("üß† L√Ω do & Ki·∫øn tr√∫c: ", style="bold cyan")
    header_text.append(f"{reasoning}\n", style="default")
    
    structure_header = Text("\nüìÇ C·∫•u Tr√∫c Th∆∞ M·ª•c & File:", style="bold cyan")
    
    tree = Tree("", guide_style="cyan")

    def generate_tree(structure: dict, parent_node: Tree):
        sorted_items = sorted(structure.items(), key=lambda item: isinstance(item[1], dict), reverse=True)
        for name, content in sorted_items:
            if isinstance(content, dict):
                node = parent_node.add(f"üìÅ [bold magenta]{name}[/]")
                generate_tree(content, node)
            else:
                parent_node.add(f"üìÑ [default]{name}[/]")

    if structure := project_plan.get("structure"):
        try:
            root_folder_name = next(iter(structure))
            root_node = tree.add(f"üìÅ [bold magenta]{root_folder_name}[/]")
            generate_tree(structure[root_folder_name], root_node)
        except (StopIteration, AttributeError):
            tree.add("[red]Kh√¥ng th·ªÉ hi·ªÉn th·ªã c·∫•u tr√∫c th∆∞ m·ª•c.[/red]")

    display_group = Group(header_text, structure_header, tree)
    
    return Panel(display_group, title="[bold green]üìù K·∫ø Ho·∫°ch D·ª± √Ån Chi Ti·∫øt[/bold green]", border_style="green", expand=False)

def run_master_agent(console: Console, args: argparse.Namespace):
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn Agent, v·ªõi v√≤ng l·∫∑p retry m·∫°nh m·∫Ω ƒë·ªÉ x·ª≠ l√Ω l·ªói Quota.
    """
    console.print(Panel(f"[bold green]ü§ñ Agent ƒêa NƒÉng ƒê√£ K√≠ch Ho·∫°t ü§ñ[/bold green]\n[yellow]M·ª•c ti√™u:[/yellow] {args.prompt}", border_style="blue"))

    initial_response = None
    
    while True:
        try:
            config = load_config()
            agent_model_name = config.get("agent_model", "models/gemini-pro-latest")
            model = api.genai.GenerativeModel(agent_model_name)
            master_prompt = build_master_agent_prompt(args.prompt)
            
            response = api.resilient_generate_content(model, master_prompt)

            json_match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
            if not json_match: json_match = re.search(r'(\{.*?\})', response.text, re.DOTALL)
            if not json_match: raise ValueError("Agent kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá ban ƒë·∫ßu.")

            initial_response = json.loads(json_match.group(1))
            break 

        except RPDQuotaExhausted:
            # API call ƒë√£ t·ª± x·ª≠ l√Ω vi·ªác chuy·ªÉn key v√† in th√¥ng b√°o.
            # Ch·ªâ c·∫ßn l·∫∑p l·∫°i v√≤ng l·∫∑p ƒë·ªÉ th·ª≠ l·∫°i v·ªõi key m·ªõi.
            continue
        
        except Exception as e:
            console.print(f"[bold red]ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong pha ph√¢n t√≠ch: {e}[/bold red]"); return

    if not initial_response:
        console.print("[bold red]L·ªói: Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI sau nhi·ªÅu l·∫ßn th·ª≠.[/bold red]"); return

    task_type = initial_response.get("task_type")
    if task_type == "project_plan":
        execute_project_plan(console, args, initial_response.get("plan", {}))
    elif task_type == "simple_task":
        execute_simple_task(console, args, initial_response.get("step", {}))
    else:
        console.print(f"[bold red]L·ªói: Agent tr·∫£ v·ªÅ lo·∫°i t√°c v·ª• kh√¥ng x√°c ƒë·ªãnh: '{task_type}'[/bold red]")

def _execute_tool(console: Console, tool_name: str, tool_args: dict) -> str:
    if tool_name not in api.AVAILABLE_TOOLS:
        raise ValueError(f"Agent tried to call a non-existent tool: {tool_name}")
    tool_function = api.AVAILABLE_TOOLS[tool_name]
    console.print(f"[yellow]üé¨ H√†nh ƒë·ªông:[/yellow] G·ªçi tool [bold cyan]{tool_name}[/bold cyan] v·ªõi tham s·ªë {tool_args}")
    if tool_name == 'write_file':
        confirm_choice = console.input(f"  [bold yellow]‚ö†Ô∏è AI mu·ªën ghi v√†o file '{tool_args.get('path')}'. ƒê·ªìng √Ω? [y/n]: [/bold yellow]", markup=True).lower()
        if confirm_choice != 'y': return "User denied the file write operation."
        try:
            content_to_write = tool_args.get('content', '')
            path_to_write = tool_args.get('path')
            parent_dir = os.path.dirname(path_to_write)
            if parent_dir: os.makedirs(parent_dir, exist_ok=True)
            with open(path_to_write, 'w', encoding='utf-8') as f: f.write(content_to_write)
            return f"Successfully wrote to file '{path_to_write}'."
        except Exception as e: return f"Error writing to file: {e}"
    else:
        with console.status(f"[green]ƒêang ch·∫°y tool {tool_name}...[/green]"):
            return tool_function(**tool_args)

def execute_project_plan(console: Console, args: argparse.Namespace, project_plan: dict):
    if not project_plan:
        console.print("[bold red]L·ªói: K·∫ø ho·∫°ch d·ª± √°n tr·ªëng.[/bold red]"); return
        
    display_panel = _format_plan_for_display(project_plan)
    console.print(display_panel)
    console.print("\n[bold green]üöÄ B·∫Øt ƒë·∫ßu pha th·ª±c thi...[/bold green]")

    config = load_config()
    agent_model_name = config.get("agent_model", "models/gemini-pro-latest")
    executor_instruction = build_executor_instruction()
    chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=executor_instruction)
    plan_str = json.dumps(project_plan, indent=2, ensure_ascii=False)
    scratchpad = f"I have been given a plan to execute.\n\n**PROJECT PLAN:**\n```json\n{plan_str}\n```\n\nMy task is to implement this plan step-by-step."
    max_steps = 30

    for step in range(max_steps):
        console.print(f"\n[bold]--- V√≤ng {step + 1}/{max_steps} ---[/bold]")
        dynamic_prompt = f"<scratchpad>\n{scratchpad}\n</scratchpad>\nBased on the plan and my scratchpad, what is the single next action I should take?"
        
        while True:
            try:
                response = api.resilient_send_message(chat_session, dynamic_prompt)
                
                json_match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
                if not json_match: json_match = re.search(r'(\{.*?\})', response.text, re.DOTALL)
                if not json_match: raise ValueError(f"No valid JSON found. Raw response:\n{response.text}")

                plan = json.loads(json_match.group(1))
                thought = plan.get("thought", "")
                action = plan.get("action", {})
                
                console.print(Panel(Markdown(thought), title="[bold magenta]Suy nghƒ© c·ªßa Executor[/bold magenta]", border_style="magenta"))

                tool_name = action.get("tool_name", "")
                tool_args = action.get("tool_args", {})

                if tool_name == "finish":
                    final_answer = tool_args.get("answer", "D·ª± √°n ƒë√£ ho√†n th√†nh.")
                    console.print(Panel(Markdown(final_answer), title="[bold green]‚úÖ D·ª± √Ån Ho√†n Th√†nh[/bold green]", border_style="green"))
                    return

                observation = _execute_tool(console, tool_name, tool_args)
                console.print(Panel(Markdown(str(observation)), title="[bold blue]üëÄ K·∫øt qu·∫£[/bold blue]", border_style="blue", expand=False))
                scratchpad += f"\n\n**Step {step + 1}:**\n- **Thought:** {thought}\n- **Action:** Called `{tool_name}` with args `{tool_args}`.\n- **Observation:** {observation}"
                break

            except RPDQuotaExhausted:
                console.print("[green]... T√°i t·∫°o session v·ªõi key m·ªõi...[/green]")
                chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=executor_instruction)
            except Exception as e:
                console.print(f"[bold red]L·ªói kh√¥ng th·ªÉ ph·ª•c h·ªìi trong v√≤ng l·∫∑p Executor: {e}[/bold red]"); return
    else:
        console.print(f"[bold yellow]‚ö†Ô∏è Agent ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n {max_steps} b∆∞·ªõc.[/bold yellow]")

def execute_simple_task(console: Console, args: argparse.Namespace, first_step: dict):
    if not first_step:
        console.print("[bold red]L·ªói: Kh√¥ng c√≥ b∆∞·ªõc ReAct ƒë·∫ßu ti√™n.[/bold red]"); return

    console.print("[green]=> Y√™u c·∫ßu ƒë∆∞·ª£c ph√¢n lo·∫°i l√† 'T√°c v·ª• ƒë∆°n gi·∫£n', k√≠ch ho·∫°t ch·∫ø ƒë·ªô ReAct.[/green]")
    
    config = load_config()
    agent_model_name = config.get("agent_model", "models/gemini-pro-latest")
    agent_instruction = build_agent_instruction()
    chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=agent_instruction)
    
    current_step_json = first_step
    max_steps = 10

    for step in range(max_steps):
        console.print(f"\n[bold]--- V√≤ng {step + 1}/{max_steps} ---[/bold]")
        
        # X·ª≠ l√Ω b∆∞·ªõc ƒë·∫ßu ti√™n ƒë√£ c√≥ s·∫µn
        if step == 0:
            thought = current_step_json.get("thought", "")
            action = current_step_json.get("action", {})
        # C√°c b∆∞·ªõc ti·∫øp theo s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ API call
        else:
            while True:
                try:
                    response = api.resilient_send_message(chat_session, next_prompt)
                    json_match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
                    if not json_match: json_match = re.search(r'(\{.*?\})', response.text, re.DOTALL)
                    if not json_match: raise ValueError(f"No valid JSON found. Raw response:\n{response.text}")
                    current_step_json = json.loads(json_match.group(1))
                    thought = current_step_json.get("thought", "")
                    action = current_step_json.get("action", {})
                    break
                except RPDQuotaExhausted:
                    console.print("[green]... T√°i t·∫°o session v·ªõi key m·ªõi...[/green]")
                    chat_session = api.start_chat_session(model_name=agent_model_name, system_instruction=agent_instruction)
                except Exception as e:
                    console.print(f"[bold red]L·ªói kh√¥ng th·ªÉ ph·ª•c h·ªìi trong v√≤ng l·∫∑p ReAct: {e}[/bold red]"); return

        try:
            console.print(Panel(Markdown(thought), title="[bold magenta]K·∫ø Ho·∫°ch C·ªßa Agent[/bold magenta]", border_style="magenta"))
            tool_name = action.get("tool_name", "")
            tool_args = action.get("tool_args", {})

            if tool_name == "finish":
                final_answer = tool_args.get("answer", "Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh.")
                console.print(Panel(Markdown(final_answer), title="[bold green]‚úÖ Nhi·ªám V·ª• Ho√†n Th√†nh[/bold green]", border_style="green"))
                return

            observation = _execute_tool(console, tool_name, tool_args)
            console.print(Panel(Markdown(str(observation)), title="[bold blue]üëÄ Quan s√°t[/bold blue]", border_style="blue", expand=False))
            
            next_prompt = f"This was the result of my last action:\n\n{observation}\n\nBased on this, what is my next thought and action?"

        except Exception as e:
            console.print(f"[bold red]L·ªói trong khi th·ª±c thi b∆∞·ªõc ReAct: {e}[/bold red]"); return
    else:
        console.print(f"[bold yellow]‚ö†Ô∏è Agent ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n {max_steps} b∆∞·ªõc.[/bold yellow]")