# src/termi_cli/handlers/history_handler.py

"""
Module x·ª≠ l√Ω c√°c t√°c v·ª• li√™n quan ƒë·∫øn l·ªãch s·ª≠ tr√≤ chuy·ªán,
bao g·ªìm hi·ªÉn th·ªã, t·∫£i, t√≥m t·∫Øt v√† l∆∞u tr·ªØ.
"""
import os
import json
import glob
import argparse
from datetime import datetime

from rich.console import Console
from rich.markdown import Markdown
from rich.table import Table

from termi_cli import api
from .core_handler import handle_conversation_turn

# --- CONSTANTS ---
HISTORY_DIR = "chat_logs"

def print_formatted_history(console: Console, history: list):
    """In l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ t·∫£i ra m√†n h√¨nh."""
    console.print("\n--- [bold yellow]L·ªäCH S·ª¨ TR√í CHUY·ªÜN[/bold yellow] ---")
    for item in history:
        role = item.get("role", "unknown")
        text_parts = [p.get("text", "") for p in item.get("parts", []) if p.get("text")]
        text = "".join(text_parts).strip()
        if not text:
            continue
        if role == "user":
            console.print(f"\n[bold cyan]You:[/bold cyan] {text}")
        elif role == "model":
            console.print(f"\n[bold magenta]AI:[/bold magenta]")
            console.print(Markdown(text))
    console.print("\n--- [bold yellow]K·∫æT TH√öC L·ªäCH S·ª¨[/bold yellow] ---\n")


def serialize_history(history):
    """Chuy·ªÉn ƒë·ªïi history th√†nh format JSON c√≥ th·ªÉ serialize m·ªôt c√°ch an to√†n."""
    serializable = []
    for content in history:
        content_dict = {"role": content.role, "parts": []}
        for part in content.parts:
            part_dict = {}
            if hasattr(part, "text") and part.text is not None:
                part_dict["text"] = part.text
            elif hasattr(part, "function_call") and part.function_call is not None:
                part_dict["function_call"] = {
                    "name": part.function_call.name,
                    "args": dict(part.function_call.args),
                }
            elif (
                hasattr(part, "function_response")
                and part.function_response is not None
            ):
                part_dict["function_response"] = {
                    "name": part.function_response.name,
                    "response": dict(part.function_response.response),
                }
            if part_dict:
                content_dict["parts"].append(part_dict)
        if content_dict["parts"]:
            serializable.append(content_dict)
    return serializable


def show_history_browser(console: Console):
    console.print(
        f"[bold green]ƒêang qu√©t c√°c file l·ªãch s·ª≠ trong `{HISTORY_DIR}/`...[/bold green]"
    )
    if not os.path.exists(HISTORY_DIR):
        console.print(
            f"[yellow]Th∆∞ m·ª•c '{HISTORY_DIR}' kh√¥ng t·ªìn t·∫°i. Ch∆∞a c√≥ l·ªãch s·ª≠ n√†o ƒë∆∞·ª£c l∆∞u.[/yellow]"
        )
        return None
    history_files = glob.glob(os.path.join(HISTORY_DIR, "*.json"))
    if not history_files:
        console.print("[yellow]Kh√¥ng t√¨m th·∫•y file l·ªãch s·ª≠ n√†o.[/yellow]")
        return None
    history_metadata = []
    for file_path in history_files:
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                title = data.get("title", os.path.basename(file_path))
                last_modified_iso = data.get(
                    "last_modified",
                    datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat(),
                )
                history_metadata.append(
                    {
                        "title": title,
                        "last_modified": last_modified_iso,
                        "file_path": file_path,
                    }
                )
        except Exception:
            continue
    history_metadata.sort(key=lambda x: x["last_modified"], reverse=True)
    table = Table(title="üìö L·ªãch s·ª≠ Tr√≤ chuy·ªán")
    table.add_column("#", style="cyan")
    table.add_column("Ch·ªß ƒê·ªÅ Tr√≤ Chuy·ªán", style="magenta")
    table.add_column("L·∫ßn C·∫≠p Nh·∫≠t Cu·ªëi", style="green")
    for i, meta in enumerate(history_metadata):
        mod_time_str = datetime.fromisoformat(meta["last_modified"]).strftime(
            "%Y-%m-%d %H:%M:%S"
        )
        table.add_row(str(i + 1), meta["title"], mod_time_str)
    console.print(table)
    try:
        choice_str = console.input(
            "Nh·∫≠p s·ªë ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán (nh·∫•n Enter ƒë·ªÉ tho√°t): ",
            markup=False
        )
        if not choice_str:
            console.print("[yellow]ƒê√£ tho√°t tr√¨nh duy·ªát l·ªãch s·ª≠.[/yellow]")
            return None
        choice = int(choice_str)
        if 1 <= choice <= len(history_metadata):
            selected_file = history_metadata[choice - 1]["file_path"]
            console.print(
                f"\n[green]ƒêang t·∫£i l·∫°i cu·ªôc tr√≤ chuy·ªán: '{history_metadata[choice - 1]['title']}'...[/green]"
            )
            return selected_file
        else:
            console.print("[yellow]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.[/yellow]")
    except (ValueError, KeyboardInterrupt, EOFError):
        console.print("\n[yellow]ƒê√£ tho√°t tr√¨nh duy·ªát l·ªãch s·ª≠.[/yellow]")
    return None


def handle_history_summary(
    console: Console, config: dict, history: list, cli_help_text: str
):
    console.print(
        "\n[bold yellow]ƒêang y√™u c·∫ßu AI t√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán...[/bold yellow]"
    )
    history_text = ""
    for item in history:
        role = "User" if item.get("role") == "user" else "AI"
        text = "".join(
            p.get("text", "") for p in item.get("parts", []) if p.get("text")
        ).strip()
        if text:
            history_text += f"{role}: {text}\n"

    if not history_text:
        console.print("[yellow]L·ªãch s·ª≠ tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ t√≥m t·∫Øt.[/yellow]")
        return

    prompt = (
        "D∆∞·ªõi ƒë√¢y l√† m·ªôt cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u. "
        "H√£y ƒë·ªçc v√† t√≥m t·∫Øt l·∫°i n·ªôi dung ch√≠nh c·ªßa n√≥ trong v√†i g·∫°ch ƒë·∫ßu d√≤ng ng·∫Øn g·ªçn.\n\n"
        f"--- N·ªòI DUNG CU·ªòC TR√í CHUY·ªÜN ---\n{history_text}---\n\n"
        "T√≥m t·∫Øt c·ªßa b·∫°n:"
    )

    try:
        model_name = config.get("default_model")
        chat_session = api.start_chat_session(
            model_name,
            "You are a helpful summarizer.",
            history=[],
            cli_help_text=cli_help_text,
        )

        console.print("\n[bold green]üìù T√≥m T·∫Øt Cu·ªôc Tr√≤ Chuy·ªán:[/bold green] ")
        handle_conversation_turn(chat_session, [prompt], console, args=argparse.Namespace(persona=None, format='rich', cli_help_text=cli_help_text))

    except Exception as e:
        console.print(f"[bold red]L·ªói khi t√≥m t·∫Øt l·ªãch s·ª≠: {e}[/bold red]")