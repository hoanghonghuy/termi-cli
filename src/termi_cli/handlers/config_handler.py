"""
Module x·ª≠ l√Ω c√°c t√°c v·ª• li√™n quan ƒë·∫øn c·∫•u h√¨nh c·ªßa ·ª©ng d·ª•ng,
bao g·ªìm qu·∫£n l√Ω persona, custom instructions v√† l·ª±a ch·ªçn model.
"""

from rich.console import Console
from rich.table import Table

from termi_cli import api
from termi_cli.config import save_config

def model_selection_wizard(console: Console, config: dict):
    console.print("[bold green]ƒêang l·∫•y danh s√°ch c√°c model kh·∫£ d·ª•ng...[/bold green]")
    try:
        models = api.get_available_models()
        if not models:
            console.print("[bold red]Kh√¥ng t√¨m th·∫•y model n√†o kh·∫£ d·ª•ng.[/bold red]")
            return
    except Exception as e:
        console.print(f"[bold red]L·ªói khi l·∫•y danh s√°ch model: {e}[/bold red]")
        return

    table = Table(title="Ch·ªçn m·ªôt model ƒë·ªÉ l√†m m·∫∑c ƒë·ªãnh")
    table.add_column("#", style="cyan")
    table.add_column("Model Name", style="magenta")
    stable_models = sorted([m for m in models if "preview" not in m and "exp" not in m])
    preview_models = sorted([m for m in models if "preview" in m or "exp" in m])
    sorted_models = stable_models + preview_models
    for i, model_name in enumerate(sorted_models):
        table.add_row(str(i + 1), model_name)
    console.print(table)

    while True:
        try:
            choice_str = console.input("Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa model b·∫°n mu·ªën ch·ªçn: ", markup=False)
            choice = int(choice_str) - 1
            if 0 <= choice < len(sorted_models):
                selected_model = sorted_models[choice]
                config["default_model"] = selected_model
                fallback_list = [selected_model]
                for m in stable_models:
                    if m != selected_model and m not in fallback_list:
                        fallback_list.append(m)
                config["model_fallback_order"] = fallback_list
                save_config(config)
                console.print(
                    f"\n[bold green]‚úÖ ƒê√£ ƒë·∫∑t model m·∫∑c ƒë·ªãnh l√†: [cyan]{selected_model}[/cyan][/bold green]"
                )
                console.print(
                    f"[yellow]Th·ª© t·ª± model d·ª± ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.[/yellow]"
                )
                break
            else:
                console.print(
                    "[bold red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.[/bold red]"
                )
        except ValueError:
            console.print("[bold red]Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.[/bold red]")
        except (KeyboardInterrupt, EOFError):
            console.print("\n[yellow]ƒê√£ h·ªßy l·ª±a ch·ªçn.[/yellow]")
            break

# --- Handlers for custom instructions ---
def add_instruction(console: Console, config: dict, instruction: str):
    if "saved_instructions" not in config:
        config["saved_instructions"] = []
    if instruction not in config["saved_instructions"]:
        config["saved_instructions"].append(instruction)
        save_config(config)
        console.print(
            f"[bold green]‚úÖ ƒê√£ th√™m ch·ªâ d·∫´n m·ªõi:[/bold green] '{instruction}'"
        )
    else:
        console.print(f"[yellow]Ch·ªâ d·∫´n ƒë√£ t·ªìn t·∫°i.[/yellow]")


def list_instructions(console: Console, config: dict):
    instructions = config.get("saved_instructions", [])
    if not instructions:
        console.print("[yellow]Kh√¥ng c√≥ ch·ªâ d·∫´n t√πy ch·ªânh n√†o ƒë∆∞·ª£c l∆∞u.[/yellow]")
        return

    table = Table(title="üìù C√°c Ch·ªâ D·∫´n T√πy Ch·ªânh ƒê√£ L∆∞u")
    table.add_column("#", style="cyan")
    table.add_column("Ch·ªâ D·∫´n", style="magenta")
    for i, instruction in enumerate(instructions):
        table.add_row(str(i + 1), instruction)
    console.print(table)


def remove_instruction(console: Console, config: dict, index: int):
    instructions = config.get("saved_instructions", [])
    if not 1 <= index <= len(instructions):
        console.print(
            f"[bold red]L·ªói: Index kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn {len(instructions)}.[/bold red]"
        )
        return

    removed_instruction = instructions.pop(index - 1)
    config["saved_instructions"] = instructions
    save_config(config)
    console.print(
        f"[bold green]‚úÖ ƒê√£ x√≥a ch·ªâ d·∫´n:[/bold green] '{removed_instruction}'"
    )

# --- Handlers for persona ---
def add_persona(console: Console, config: dict, name: str, instruction: str):
    """Th√™m m·ªôt persona m·ªõi v√†o config."""
    if "personas" not in config:
        config["personas"] = {}
    
    config["personas"][name] = instruction
    save_config(config)
    console.print(f"[bold green]‚úÖ ƒê√£ l∆∞u persona [cyan]'{name}'[/cyan].[/bold green]")

def list_personas(console: Console, config: dict):
    """Li·ªát k√™ c√°c persona ƒë√£ l∆∞u."""
    personas = config.get("personas", {})
    if not personas:
        console.print("[yellow]Kh√¥ng c√≥ persona n√†o ƒë∆∞·ª£c l∆∞u.[/yellow]")
        return

    table = Table(title="üé≠ C√°c Persona ƒê√£ L∆∞u")
    table.add_column("T√™n Persona", style="cyan")
    table.add_column("Ch·ªâ D·∫´n H·ªá Th·ªëng", style="magenta")
    for name, instruction in personas.items():
        table.add_row(name, instruction)
    console.print(table)

def remove_persona(console: Console, config: dict, name: str):
    """X√≥a m·ªôt persona theo t√™n."""
    personas = config.get("personas", {})
    if name not in personas:
        console.print(f"[bold red]L·ªói: Kh√¥ng t√¨m th·∫•y persona c√≥ t√™n '{name}'.[/bold red]")
        return

    removed_instruction = personas.pop(name)
    config["personas"] = personas
    save_config(config)
    console.print(f"[bold green]‚úÖ ƒê√£ x√≥a persona [cyan]'{name}'[/cyan].[/bold green]")