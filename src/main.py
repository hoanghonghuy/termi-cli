import os
import sys
import io
import contextlib
import argparse
import re
from rich.markup import escape
from rich.console import Console
from rich.markdown import Markdown
from PIL import Image

from .tools import code_tool 

# Context manager ƒë·ªÉ t·∫Øt stderr t·∫°m th·ªùi
@contextlib.contextmanager
def silence_stderr():
    """T·∫°m th·ªùi chuy·ªÉn h∆∞·ªõng stderr sang devnull."""
    original_stderr_fd = os.dup(2)
    devnull_fd = os.open(os.devnull, os.O_WRONLY)
    os.dup2(devnull_fd, 2)
    os.close(devnull_fd)
    try:
        yield
    finally:
        os.dup2(original_stderr_fd, 2)
        os.close(original_stderr_fd)

# ƒê·∫∑t c√°c bi·∫øn m√¥i tr∆∞·ªùng
os.environ.setdefault('GRPC_VERBOSITY', 'ERROR')
os.environ.setdefault('GLOG_minloglevel', '3')
os.environ.setdefault('TF_CPP_MIN_LOG_LEVEL', '3')
os.environ.setdefault('ABSL_CPP_MIN_LOG_LEVEL', '3')

# T·∫Øt log C++ khi import
with silence_stderr():
    import google.generativeai as genai
    from google.api_core.exceptions import ResourceExhausted

# T·∫Øt log Python-level
try:
    import logging
    logging.getLogger('google').setLevel(logging.ERROR)
    logging.getLogger('grpc').setLevel(logging.ERROR)
    logging.getLogger('absl').setLevel(logging.ERROR)
    import absl.logging as _absl_logging
    _absl_logging.set_verbosity(_absl_logging.ERROR)
except (ImportError, AttributeError):
    pass

import json
import traceback
import logging as _logging
import subprocess
from dotenv import load_dotenv

from . import api
from . import utils
from . import cli
from . import handlers
from .config import load_config
from . import memory

_logging.basicConfig(level=_logging.ERROR)

def main(provided_args=None):
    """H√†m ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô ·ª©ng d·ª•ng."""
    load_dotenv()
    console = Console()
    config = load_config()

    parser = cli.create_parser()
    
    try:
        args = provided_args or parser.parse_args()

        # T·ª± ki·ªÉm tra gi√° tr·ªã c·ªßa --format m·ªôt c√°ch th·ªß c√¥ng
        if args.format and args.format not in ['rich', 'raw']:
            console.print(f"[bold red]L·ªói: Gi√° tr·ªã kh√¥ng h·ª£p l·ªá cho --format. Ph·∫£i l√† 'rich' ho·∫∑c 'raw'.[/bold red]")
            return

        cli_help_text = parser.format_help()
        args.cli_help_text = cli_help_text 

        args.model = args.model or config.get("default_model")
        args.format = args.format or config.get("default_format", "rich")
        args.persona = args.persona or None

        keys = api.initialize_api_keys()
        if not keys:
            console.print("[bold red]L·ªói: Vui l√≤ng thi·∫øt l·∫≠p GOOGLE_API_KEY trong file .env[/bold red]")
            return
        
        if len(keys) > 1:
            console.print(f"[dim]üîë ƒê√£ t·∫£i {len(keys)} API key(s)[/dim]")
        
        api.configure_api(keys[0])

        # X·ª≠ l√Ω c√°c l·ªánh qu·∫£n l√Ω
        if args.add_instruct:
            handlers.add_instruction(console, config, args.add_instruct)
            return
        if args.list_instructs:
            handlers.list_instructions(console, config)
            return
        if args.rm_instruct is not None:
            handlers.remove_instruction(console, config, args.rm_instruct)
            return
        if args.add_persona:
            handlers.add_persona(console, config, args.add_persona[0], args.add_persona[1])
            return
        if args.list_personas:
            handlers.list_personas(console, config)
            return
        if args.rm_persona:
            handlers.remove_persona(console, config, args.rm_persona)
            return
        
        if args.list_models:
            api.list_models(console)
            return
        if args.set_model:
            handlers.model_selection_wizard(console, config)
            return
        
        if args.history and not provided_args:
            selected_file = handlers.show_history_browser(console)
            if selected_file:
                action = ''
                while action not in ['c', 's', 'q']:
                    prompt_text = "B·∫°n mu·ªën [c]hat ti·∫øp, [s]ummarize (t√≥m t·∫Øt), hay [q]uit? "
                    console.print(f"[bold yellow]{escape(prompt_text)}[/bold yellow]", end="")
                    sys.stdout.flush()
                    action = input().lower().strip()
                    if action not in ['c', 's', 'q']:
                        console.print("[bold red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.[/bold red]")

                if action == 'q':
                    console.print("[yellow]ƒê√£ tho√°t.[/yellow]")
                    return

                args.load = selected_file
                if action == 'c':
                    args.chat = True
                    args.print_log = True
                elif action == 's':
                    args.summarize = True
            else:
                return
        
        # X·ª≠ l√Ω c√°c tool ƒë·ªôc l·∫≠p
        if args.document or args.refactor:
            file_path = args.document or args.refactor
            tool_func = code_tool.document_code if args.document else code_tool.refactor_code
            tool_name = "vi·∫øt t√†i li·ªáu" if args.document else "t√°i c·∫•u tr√∫c"

            if not os.path.exists(file_path):
                console.print(f"[bold red]L·ªói: File '{file_path}' kh√¥ng t·ªìn t·∫°i.[/bold red]")
                return

            with console.status(f"[bold green]ü§ñ ƒêang {tool_name} cho file [cyan]{file_path}[/cyan]...[/bold green]", spinner="dots"):
                result = tool_func(file_path=file_path)
            
            if result.startswith("Error"):
                 console.print(f"[bold red]{result}[/bold red]")
                 return

            if args.output:
                try:
                    with open(args.output, 'w', encoding='utf-8') as f:
                        code_match = re.search(r"```(?:\w+)?\n(.*)```", result, re.DOTALL)
                        content_to_write = code_match.group(1).strip() if code_match else result
                        f.write(content_to_write)
                    console.print(f"\n[bold green]‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file: [cyan]{args.output}[/cyan][/bold green]")
                except Exception as e:
                    console.print(f"[bold red]L·ªói khi l∆∞u file: {e}[/bold red]")
            else:
                console.print(f"\n[bold green]‚ú® K·∫øt qu·∫£ {tool_name}:[/bold green]")
                console.print(Markdown(result))
            return

        # X√¢y d·ª±ng system instruction
        saved_instructions = config.get("saved_instructions", [])
        system_instruction_str = "\n".join(f"- {item}" for item in saved_instructions)
        if args.system_instruction:
            system_instruction_str = args.system_instruction
        elif args.persona and config.get("personas", {}).get(args.persona):
            system_instruction_str = config["personas"][args.persona]
        
        # T·∫£i l·ªãch s·ª≠
        history = None
        if args.load:
            if os.path.exists(args.load):
                try:
                    with open(args.load, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        history = data.get("history", []) if isinstance(data, dict) else data
                    console.print(f"[green]ƒê√£ t·∫£i l·ªãch s·ª≠ t·ª´ '{args.load}'.[/green]")
                except Exception as e:
                    console.print(f"[bold red]L·ªói khi t·∫£i l·ªãch s·ª≠: {e}[/bold red]")
                    return
            else:
                console.print(f"[yellow]C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file l·ªãch s·ª≠ '{args.load}'. B·∫Øt ƒë·∫ßu phi√™n m·ªõi.[/yellow]")
        
        if history and args.summarize:
            handlers.handle_history_summary(console, config, history, cli_help_text)
            return
        
        if history and args.print_log:
            handlers.print_formatted_history(console, history)
        
        # Ch·∫ø ƒë·ªô chat
        if args.chat or args.topic:
            chat_session = api.start_chat_session(args.model, system_instruction_str, history, cli_help_text=cli_help_text)
            handlers.run_chat_mode(chat_session, console, config, args)
            return
        
        # X·ª≠ l√Ω input t·ª´ pipe
        piped_input = None
        if not sys.stdin.isatty():
             sys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')
             piped_input = sys.stdin.read().strip()
        
        # X√¢y d·ª±ng prompt
        if not any([args.prompt, piped_input, args.image, args.git_commit]):
             console.print("[bold red]L·ªói: C·∫ßn cung c·∫•p prompt ho·∫∑c m·ªôt h√†nh ƒë·ªông c·ª• th·ªÉ.[/bold red]")
             parser.print_help()
             return

        prompt_parts = []
        prompt_text = ""
        user_intent = ""

        if args.git_commit:
            try:
                staged_diff = subprocess.check_output(["git", "diff", "--staged"], text=True, encoding='utf-8').strip()
                unstaged_diff = subprocess.check_output(["git", "diff"], text=True, encoding='utf-8').strip()
                untracked_files = subprocess.check_output(["git", "ls-files", "--others", "--exclude-standard"], text=True, encoding='utf-8').strip()

                if not staged_diff and not unstaged_diff and not untracked_files:
                    console.print("[yellow]Kh√¥ng c√≥ thay ƒë·ªïi n√†o trong repository ƒë·ªÉ commit.[/yellow]")
                    return
                
                git_context = "D∆∞·ªõi ƒë√¢y l√† tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa repository Git:\n\n"
                if staged_diff:
                    git_context += f"--- C√ÅC THAY ƒê·ªîI ƒê√É STAGED ---\n```diff\n{staged_diff}\n```\n\n"
                if unstaged_diff:
                    git_context += f"--- C√ÅC THAY ƒê·ªîI CH∆ØA STAGED ---\n```diff\n{unstaged_diff}\n```\n\n"
                if untracked_files:
                    git_context += f"--- C√ÅC FILE M·ªöI CH∆ØA ƒê∆Ø·ª¢C THEO D√ïI ---\n{untracked_files}\n\n"

                user_intent = (
                    f"{git_context}"
                    "**CRITICAL TASK:** Based on all the Git status information above, you MUST generate exactly two separate shell code blocks:\n"
                    "1. A `git add` command to stage ALL changes (modified and new files).\n"
                    "2. A complete `git commit -m \"...\"` command with a well-written Conventional Commit message that summarizes all the changes.\n"
                    "Do not provide any explanation outside of these two code blocks."
                )
                prompt_text = user_intent
            except subprocess.CalledProcessError:
                console.print("[bold red]L·ªói: Kh√¥ng th·ªÉ ch·∫°y l·ªánh git. ƒê√¢y c√≥ ph·∫£i l√† m·ªôt repository Git kh√¥ng?[/bold red]")
                return
        else:
            user_question = args.prompt or ""
            if piped_input:
                user_intent = f"D·ª±a v√†o n·ªôi dung sau: '{piped_input}', h√£y th·ª±c hi·ªán y√™u c·∫ßu: '{user_question}'"
                prompt_text = f"D·ª±a v√†o n·ªôi dung ƒë∆∞·ª£c cung c·∫•p sau ƒë√¢y:\n{piped_input}\n\n{user_question}"
            else:
                user_intent = user_question
                prompt_text = user_question

        if user_intent:
            relevant_memory = memory.search_memory(user_intent)
            if relevant_memory:
                console.print("[dim]üß† ƒê√£ t√¨m th·∫•y tr√≠ nh·ªõ li√™n quan...[/dim]")
                prompt_text = f"{relevant_memory}\n---\n\n{prompt_text}"

        if args.read_dir:
            console.print("[yellow]ƒêang ƒë·ªçc ng·ªØ c·∫£nh th∆∞ m·ª•c...[/yellow]")
            context = utils.get_directory_context()
            prompt_text = f"D·ª±a v√†o ng·ªØ c·∫£nh c√°c file d∆∞·ªõi ƒë√¢y:\n{context}\n\n{prompt_text}"
        
        if args.image:
            for image_path in args.image:
                try:
                    img = Image.open(image_path)
                    prompt_parts.append(img)
                except (FileNotFoundError, IsADirectoryError):
                    console.print(f"[bold red]L·ªói: Kh√¥ng t√¨m th·∫•y file ·∫£nh '{image_path}'[/bold red]")
                    return
                except Exception as e:
                    console.print(f"[bold red]L·ªói khi m·ªü ·∫£nh '{image_path}': {e}[/bold red]")
                    return
            console.print(f"[green]ƒê√£ t·∫£i l√™n {len(args.image)} ·∫£nh.[/green]")
        
        if prompt_text:
            prompt_parts.append(prompt_text)

        # G·ª≠i y√™u c·∫ßu t·ªõi AI
        chat_session = api.start_chat_session(args.model, system_instruction_str, history, cli_help_text=cli_help_text)
        model_display_name = args.model.replace("models/", "")
        console.print(f"\n[dim]ü§ñ Model: {model_display_name}[/dim]")
        console.print("\nüí° [bold green]Ph·∫£n h·ªìi:[/bold green]")
        
        try:
            final_response_text, token_usage, token_limit = handlers.handle_conversation_turn(
                chat_session, prompt_parts, console, model_name=args.model, args=args
            )
            
            if user_intent and final_response_text:
                memory.add_memory(user_intent, final_response_text)
            
            if token_usage and token_usage['total_tokens'] > 0:
                if token_limit > 0:
                    remaining = token_limit - token_usage['total_tokens']
                    console.print(f"\n[dim]üìä Token: {token_usage['prompt_tokens']} (prompt) + "
                                 f"{token_usage['completion_tokens']} (completion) = "
                                 f"{token_usage['total_tokens']:,} / {token_limit:,} "
                                 f"({remaining:,} c√≤n l·∫°i)[/dim]")
                else:
                    console.print(f"\n[dim]üìä Token: {token_usage['prompt_tokens']} (prompt) + "
                                 f"{token_usage['completion_tokens']} (completion) = "
                                 f"{token_usage['total_tokens']:,} (total)[/dim]")
            
            if args.output and not (args.document or args.refactor):
                with open(args.output, 'w', encoding='utf-8') as f:
                    f.write(final_response_text)
                console.print(f"\n[bold green]‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file: [cyan]{args.output}[/cyan][/bold green]")
            
            utils.execute_suggested_commands(final_response_text, console)

        except Exception as e:
            console.print(f"[bold red]\nƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}[/bold red]")

    except KeyboardInterrupt:
        console.print("\n[yellow]ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.[/yellow]")
    except Exception as e:
        console.print(f"[bold red]ƒê√£ x·∫£y ra l·ªói kh·ªüi ƒë·ªông: {e}[/bold red]")

if __name__ == "__main__":
    main()